{"ast":null,"code":"var _jsxFileName = \"/home/teja/Desktop/6th sem/SWE/FinalProject/integration/frontend/src/components/student/RoomAllot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RoomAllot() {\n  _s();\n  const [roomsdata, setRoomsData] = useState([]);\n  const [selectedBlock, setSelectedBlock] = useState(\"\");\n  const [selectedFloor, setSelectedFloor] = useState(\"\");\n  const [id, setId] = useState('cs21btech11002@iith.ac.in'); // Assuming id is stored in state\n  const [roomNumber, setRoomNumber] = useState(null); // Assuming roomNumber is stored in state\n\n  useEffect(() => {\n    axios.get('/room_allot').then(response => {\n      setRoomsData(response.data);\n    });\n  }, []);\n  const handleBlockButtonClick = blockId => {\n    setSelectedBlock(blockId);\n    setSelectedFloor(\"\"); // Reset selectedFloor when block button is clicked\n  };\n  const handleFloorSelect = floor => {\n    setSelectedFloor(floor);\n  };\n  const handleAllotRoom = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: roomsdata.map(block => {\n        const hasFreeRooms = Object.keys(block).some(key => {\n          return key !== \"block_id\" && key !== \"block_name\" && block[key].length > 0;\n        });\n        if (hasFreeRooms) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleBlockButtonClick(block.block_id),\n              children: block.block_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 33\n            }, this)\n          }, block.block_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this);\n        }\n        return null;\n      })\n    }, void 0, false);\n  };\n  const allotRoom = () => {\n    if (selectedBlock && selectedFloor) {\n      const block = roomsdata.find(block => block.block_id === selectedBlock);\n      const floor = block[selectedFloor];\n      const roomNumber = floor.shift();\n      setRoomNumber(roomNumber);\n      axios.post('/room_allot', {\n        id,\n        roomNumber\n      }).then(response => {\n        // reload the page\n        window.location.reload();\n        // also change the state of the room number in memory\n      });\n    } else {\n      alert(\"Please select block and floor\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: roomNumber ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Room already allotted: \", roomNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [handleAllotRoom(), selectedBlock && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-container\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedFloor,\n          onChange: e => handleFloorSelect(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Floor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 33\n          }, this), roomsdata.filter(block => block.block_id === selectedBlock).map(block => Object.keys(block).filter(key => key.startsWith('floor')).map(floorKey => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: floorKey,\n            children: floorKey\n          }, floorKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 45\n          }, this)))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this), \"button to allot room\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: allotRoom,\n        children: \"Allot Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n_s(RoomAllot, \"JM4gGAsUeXCZM83BUfyX0Q5fLr0=\");\n_c = RoomAllot;\nvar _c;\n$RefreshReg$(_c, \"RoomAllot\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","RoomAllot","_s","roomsdata","setRoomsData","selectedBlock","setSelectedBlock","selectedFloor","setSelectedFloor","id","setId","roomNumber","setRoomNumber","get","then","response","data","handleBlockButtonClick","blockId","handleFloorSelect","floor","handleAllotRoom","children","map","block","hasFreeRooms","Object","keys","some","key","length","onClick","block_id","block_name","fileName","_jsxFileName","lineNumber","columnNumber","allotRoom","find","shift","post","window","location","reload","alert","className","value","onChange","e","target","filter","startsWith","floorKey","_c","$RefreshReg$"],"sources":["/home/teja/Desktop/6th sem/SWE/FinalProject/integration/frontend/src/components/student/RoomAllot.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from './axios';\n\nexport default function RoomAllot() {\n    const [roomsdata, setRoomsData] = useState([]);\n    const [selectedBlock, setSelectedBlock] = useState(\"\");\n    const [selectedFloor, setSelectedFloor] = useState(\"\");\n    const [id, setId] = useState('cs21btech11002@iith.ac.in'); // Assuming id is stored in state\n    const [roomNumber, setRoomNumber] = useState(null); // Assuming roomNumber is stored in state\n\n    useEffect(() => {\n        axios.get('/room_allot').then(response => {\n            setRoomsData(response.data);\n        });\n    }, []);\n\n    const handleBlockButtonClick = (blockId) => {\n        setSelectedBlock(blockId);\n        setSelectedFloor(\"\"); // Reset selectedFloor when block button is clicked\n    };\n\n    const handleFloorSelect = (floor) => {\n        setSelectedFloor(floor);\n    };\n\n    const handleAllotRoom = () => {\n        return (\n            <>\n                {roomsdata.map(block => {\n                    const hasFreeRooms = Object.keys(block).some(key => {\n                        return key !== \"block_id\" && key !== \"block_name\" && block[key].length > 0;\n                    });\n\n                    if (hasFreeRooms) {\n                        return (\n                            <div key={block.block_id}>\n                                <button onClick={() => handleBlockButtonClick(block.block_id)}>{block.block_name}</button>\n                            </div>\n                        );\n                    }\n                    return null;\n                })}\n            </>\n        );\n    };\n\n    const allotRoom = () => {\n        if (selectedBlock && selectedFloor) {\n            const block = roomsdata.find(block => block.block_id === selectedBlock);\n            const floor = block[selectedFloor];\n            const roomNumber = floor.shift();\n            setRoomNumber(roomNumber);\n            axios.post('/room_allot', { id, roomNumber }).then(response => {\n                // reload the page\n                window.location.reload();\n                // also change the state of the room number in memory\n            });\n        }\n        else {\n            alert(\"Please select block and floor\");\n        }\n    }\n\n    return (\n        <>\n            {roomNumber ? (\n                <p>Room already allotted: {roomNumber}</p>\n            ) : (\n                <>\n                    {handleAllotRoom()}\n                    {selectedBlock && (\n                        <div className=\"dropdown-container\">\n                            <select value={selectedFloor} onChange={(e) => handleFloorSelect(e.target.value)}>\n                                <option value=\"\">Select Floor</option>\n                                {roomsdata\n                                    .filter(block => block.block_id === selectedBlock)\n                                    .map(block => (\n                                        Object.keys(block).filter(key => key.startsWith('floor')).map(floorKey => (\n                                            <option key={floorKey} value={floorKey}>{floorKey}</option>\n                                        ))\n                                    ))}\n                            </select>\n                        </div>\n                    )}\n                    button to allot room\n                    <button onClick={allotRoom}>Allot Room</button>\n                </>\n            )}\n        </>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}